#include "gtest/gtest.h"

#include "security_handler.h"

namespace com {
namespace seagate {
namespace kinetic {

using ::testing::_;
using ::testing::Return;
using ::testing::SetArgPointee;
using ::testing::NiceMock;

class SecurityHandlerTest: public ::testing::Test {
    protected:
    SecurityHandlerTest():
            security_handler_()
    { }

    virtual void SetUp() {
    }

    SecurityHandler security_handler_;
};

// Calls KAT_PKCSVerify which test the security signature signing calculations with the
// simple message of "hello world"
TEST_F(SecurityHandlerTest, KAT_PKCSVerifyReturnsTrue) {
    EXPECT_EQ(true, security_handler_.KAT_PKCSVerify());
}

TEST_F(SecurityHandlerTest, VerifySecuritySignatureReturnsTrueForValidSignature) {
    struct LODHeader thumbprint_lodHeader, security_signature, security_info;

    unsigned char thumbprint_input[256] = {
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52
    };

    unsigned char signature_input[256] = {
        0x24, 0xbc, 0x7a, 0xd1, 0xc2, 0xce, 0xb0, 0xa1,
        0xaf, 0x36, 0xcc, 0xa5, 0x60, 0x77, 0x24, 0x62,
        0x95, 0xed, 0x8c, 0x22, 0x52, 0xd1, 0x65, 0x83,
        0x53, 0xac, 0x8b, 0x27, 0xce, 0x5d, 0xb6, 0xca,
        0xc4, 0xbd, 0x51, 0xc8, 0xd4, 0x9b, 0x50, 0xfe,
        0x5f, 0xb8, 0x92, 0xc5, 0x81, 0xa6, 0xeb, 0x47,
        0x0e, 0x02, 0x4a, 0xf4, 0x0b, 0x69, 0xc2, 0xa6,
        0x17, 0x16, 0x8f, 0x98, 0xfd, 0xfe, 0x8a, 0x58,
        0x7c, 0xac, 0xd4, 0x4c, 0x9b, 0xf5, 0xf4, 0xdf,
        0x3f, 0x4d, 0x93, 0x23, 0x51, 0x45, 0x6d, 0xe5,
        0x4e, 0xc2, 0x4f, 0x22, 0x4a, 0x24, 0xaa, 0x99,
        0xe7, 0x57, 0xc5, 0xec, 0x8c, 0xa5, 0x23, 0x55,
        0xad, 0x46, 0xdf, 0xd2, 0xb5, 0x9d, 0x1a, 0x98,
        0xe6, 0x3d, 0x46, 0xf5, 0xc5, 0x75, 0xcc, 0x4d,
        0xfe, 0xa9, 0xc4, 0x74, 0x26, 0x6b, 0x9a, 0x16,
        0xcd, 0x4d, 0x10, 0x52, 0x4e, 0x88, 0x0c, 0x6b,
        0x7b, 0x5e, 0x17, 0x1c, 0x4d, 0xab, 0x29, 0x30,
        0x14, 0xd3, 0xe0, 0xe3, 0xd2, 0x66, 0xe9, 0xff,
        0x17, 0xf0, 0xa2, 0x81, 0x97, 0x11, 0x00, 0xb8,
        0x8e, 0x4a, 0xb9, 0xa3, 0x72, 0xb9, 0x9d, 0x72,
        0xdf, 0x75, 0xa2, 0x82, 0xa7, 0x38, 0x16, 0xbc,
        0x9c, 0x06, 0x24, 0x59, 0xd1, 0x2d, 0x33, 0xf2,
        0x85, 0x81, 0x8d, 0xe7, 0x82, 0x60, 0x49, 0x45,
        0xdb, 0x55, 0xfe, 0x01, 0x87, 0x3d, 0xa9, 0x00,
        0x19, 0x95, 0xb1, 0xcf, 0x2a, 0x3a, 0x3f, 0xfd,
        0x6e, 0x8e, 0xc2, 0x40, 0x6d, 0x64, 0x2c, 0x07,
        0x75, 0x55, 0xb1, 0xe7, 0xc9, 0x53, 0xae, 0x53,
        0xce, 0xfb, 0x8c, 0xe5, 0x0f, 0x62, 0xc5, 0x8b,
        0xf0, 0xe4, 0x4f, 0xa1, 0x49, 0xd4, 0xd7, 0x7d,
        0xa0, 0xd1, 0x67, 0xe2, 0xcd, 0x32, 0x28, 0xae,
        0xa9, 0x15, 0xa2, 0x8b, 0xa1, 0xa2, 0x0e, 0x4a,
        0x26, 0xdd, 0x6d, 0x23, 0x72, 0xff, 0xb0, 0x95
    };

    unsigned char thumbprint_header[64] =  {
        0x78, 0x03, 0x28, 0x24, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x14, 0x10, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0xbb
    };

    unsigned char signature_header[64] = {
        0x05, 0x29, 0x94, 0xa6, 0x01, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    unsigned char security_info_header[64] = {
        0xe7, 0x1a, 0x0e, 0x59, 0x01, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x87
    };

    // setup thumbprint
    thumbprint_lodHeader.input_size = 256;
    thumbprint_lodHeader.input = std::string(reinterpret_cast<char *>(thumbprint_input), 256);
    thumbprint_lodHeader.header = std::string(reinterpret_cast<char *>(thumbprint_header), 64);

    // setup security signature
    security_signature.input_size = 256;
    security_signature.input = std::string(reinterpret_cast<char *>(signature_input), 256);
    security_signature.header = std::string(reinterpret_cast<char *>(signature_header), 64);

    // setup security info
    security_info.input_size = 0;
    security_info.header = std::string(reinterpret_cast<char *>(security_info_header), 64);

    EXPECT_EQ(true, security_handler_.VerifySecuritySignature(&thumbprint_lodHeader,
        &security_signature, & security_info));
}

TEST_F(SecurityHandlerTest, VerifySecuritySignatureReturnsFalseForInValidSignature) {
    struct LODHeader thumbprint_lodHeader, security_signature, security_info;

    unsigned char thumbprint_input[256] = {
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52,
        0x43, 0xed, 0xbe, 0x30, 0xdf, 0x99, 0x42, 0xea,
        0xe4, 0xcb, 0xd4, 0xb5, 0xfe, 0xba, 0x75, 0xaa,
        0xe8, 0x9c, 0x3a, 0xd0, 0x62, 0x2f, 0xbf, 0x6a,
        0x6b, 0xa7, 0xc6, 0x85, 0x63, 0x84, 0xc9, 0x52
    };

    unsigned char signature_input[256] = {
        0x24, 0xbc, 0x7a, 0xd1, 0xc2, 0xce, 0xb0, 0xa1,
        0xaf, 0x36, 0xcc, 0xa5, 0x60, 0x77, 0x24, 0x62,
        0x95, 0xed, 0x8c, 0x22, 0x52, 0xd1, 0x65, 0x83,
        0x53, 0xac, 0x8b, 0x27, 0xce, 0x5d, 0xb6, 0xca,
        0xc4, 0xbd, 0x51, 0xc8, 0xd4, 0x9b, 0x50, 0xfe,
        0x5f, 0xb8, 0x92, 0xc5, 0x81, 0xa6, 0xeb, 0x47,
        0x0e, 0x02, 0x4a, 0xf4, 0x0b, 0x69, 0xc2, 0xa6,
        0x17, 0x16, 0x8f, 0x98, 0xfd, 0xfe, 0x8a, 0x58,
        0x7c, 0xac, 0xd4, 0x4c, 0x9b, 0xf5, 0xf4, 0xdf,
        0x3f, 0x4d, 0x93, 0x23, 0x51, 0x45, 0x6d, 0xe5,
        0x4e, 0xc2, 0x4f, 0x22, 0x4a, 0x24, 0xaa, 0x99,
        0xe7, 0x57, 0xc5, 0xec, 0x8c, 0xa5, 0x23, 0x55,
        0xad, 0x46, 0xdf, 0xd2, 0xb5, 0x9d, 0x1a, 0x98,
        0xe6, 0x3d, 0x46, 0xf5, 0xc5, 0x75, 0xcc, 0x4d,
        0xfe, 0xa9, 0xc4, 0x74, 0x26, 0x6b, 0x9a, 0x16,
        0xcd, 0x4d, 0x10, 0x52, 0x4e, 0x88, 0x0c, 0x6b,
        0x7b, 0x5e, 0x17, 0x1c, 0x4d, 0xab, 0x29, 0x30,
        0x14, 0xd3, 0xe0, 0xe3, 0xd2, 0x66, 0xe9, 0xff,
        0x17, 0xf0, 0xa2, 0x81, 0x97, 0x11, 0x00, 0xb8,
        0x8e, 0x4a, 0xb9, 0xa3, 0x72, 0xb9, 0x9d, 0x72,
        0xdf, 0x75, 0xa2, 0x82, 0xa7, 0x38, 0x16, 0xbc,
        0x9c, 0x06, 0x24, 0x59, 0xd1, 0x2d, 0x33, 0xf2,
        0x85, 0x81, 0x8d, 0xe7, 0x82, 0x61, 0x49, 0x45,
        0xdb, 0x55, 0xfe, 0x01, 0x87, 0x3d, 0xa9, 0x00,
        0x19, 0x95, 0xb1, 0xcf, 0x2a, 0x3a, 0x3f, 0xfd,
        0x6e, 0x8e, 0xc2, 0x40, 0x6d, 0x64, 0x2c, 0x07,
        0x75, 0x55, 0xb1, 0xe7, 0xc9, 0x53, 0xae, 0x53,
        0xce, 0xfb, 0x8c, 0xe5, 0x0f, 0x62, 0xc5, 0x8b,
        0xf0, 0xe4, 0x4f, 0xa1, 0x49, 0xd4, 0xd7, 0x7d,
        0xa0, 0xd1, 0x67, 0xe2, 0xcd, 0x32, 0x28, 0xae,
        0xa9, 0x15, 0xa2, 0x8b, 0xa1, 0xa2, 0x0e, 0x4a,
        0x26, 0xdd, 0x6d, 0x23, 0x72, 0xff, 0xb0, 0x95
    };

    unsigned char thumbprint_header[64] =  {
        0x78, 0x03, 0x28, 0x24, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x14, 0x10, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0xbb
    };

    unsigned char signature_header[64] = {
        0x05, 0x29, 0x94, 0xa6, 0x01, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    unsigned char security_info_header[64] = {
        0xe7, 0x1a, 0x0e, 0x59, 0x01, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x87
    };

    // setup thumbprint
    thumbprint_lodHeader.input_size = 256;
    thumbprint_lodHeader.input = std::string(reinterpret_cast<char *>(thumbprint_input), 256);
    thumbprint_lodHeader.header = std::string(reinterpret_cast<char *>(thumbprint_header), 64);

    // setup security signature
    security_signature.input_size = 256;
    security_signature.input = std::string(reinterpret_cast<char *>(signature_input), 256);
    security_signature.header = std::string(reinterpret_cast<char *>(signature_header), 64);

    // setup security info
    security_info.input_size = 0;
    security_info.header = std::string(reinterpret_cast<char *>(security_info_header), 64);

    EXPECT_FALSE(security_handler_.VerifySecuritySignature(&thumbprint_lodHeader,
        &security_signature, & security_info));
}

} // namespace kinetic
} // namespace seagate
} // namespace com
