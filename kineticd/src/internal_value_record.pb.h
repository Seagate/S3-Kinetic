// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_value_record.proto

#ifndef PROTOBUF_internal_5fvalue_5frecord_2eproto__INCLUDED
#define PROTOBUF_internal_5fvalue_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace seagate {
namespace kinetic {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_internal_5fvalue_5frecord_2eproto();
void protobuf_AssignDesc_internal_5fvalue_5frecord_2eproto();
void protobuf_ShutdownFile_internal_5fvalue_5frecord_2eproto();

class InternalValueRecord;

// ===================================================================

class InternalValueRecord : public ::google::protobuf::Message {
 public:
  InternalValueRecord();
  virtual ~InternalValueRecord();

  InternalValueRecord(const InternalValueRecord& from);

  inline InternalValueRecord& operator=(const InternalValueRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalValueRecord& default_instance();

  void Swap(InternalValueRecord* other);

  // implements Message ----------------------------------------------

  InternalValueRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InternalValueRecord& from);
  void MergeFrom(const InternalValueRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required bytes tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional int32 algorithm = 4;
  inline bool has_algorithm() const;
  inline void clear_algorithm();
  static const int kAlgorithmFieldNumber = 4;
  inline ::google::protobuf::int32 algorithm() const;
  inline void set_algorithm(::google::protobuf::int32 value);

  // optional bool badData = 5;
  inline bool has_baddata() const;
  inline void clear_baddata();
  static const int kBadDataFieldNumber = 5;
  inline bool baddata() const;
  inline void set_baddata(bool value);

  // @@protoc_insertion_point(class_scope:com.seagate.kinetic.proto.InternalValueRecord)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_algorithm();
  inline void clear_has_algorithm();
  inline void set_has_baddata();
  inline void clear_has_baddata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::std::string* value_;
  ::std::string* tag_;
  ::google::protobuf::int32 algorithm_;
  bool baddata_;
  friend void  protobuf_AddDesc_internal_5fvalue_5frecord_2eproto();
  friend void protobuf_AssignDesc_internal_5fvalue_5frecord_2eproto();
  friend void protobuf_ShutdownFile_internal_5fvalue_5frecord_2eproto();

  void InitAsDefaultInstance();
  static InternalValueRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// InternalValueRecord

// required bytes version = 1;
inline bool InternalValueRecord::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalValueRecord::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalValueRecord::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalValueRecord::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& InternalValueRecord::version() const {
  // @@protoc_insertion_point(field_get:com.seagate.kinetic.proto.InternalValueRecord.version)
  return *version_;
}
inline void InternalValueRecord::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:com.seagate.kinetic.proto.InternalValueRecord.version)
}
inline void InternalValueRecord::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.seagate.kinetic.proto.InternalValueRecord.version)
}
inline void InternalValueRecord::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.seagate.kinetic.proto.InternalValueRecord.version)
}
inline ::std::string* InternalValueRecord::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.seagate.kinetic.proto.InternalValueRecord.version)
  return version_;
}
inline ::std::string* InternalValueRecord::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InternalValueRecord::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.seagate.kinetic.proto.InternalValueRecord.version)
}

// optional bytes value = 2;
inline bool InternalValueRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalValueRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalValueRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalValueRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& InternalValueRecord::value() const {
  // @@protoc_insertion_point(field_get:com.seagate.kinetic.proto.InternalValueRecord.value)
  return *value_;
}
inline void InternalValueRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:com.seagate.kinetic.proto.InternalValueRecord.value)
}
inline void InternalValueRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.seagate.kinetic.proto.InternalValueRecord.value)
}
inline void InternalValueRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.seagate.kinetic.proto.InternalValueRecord.value)
}
inline ::std::string* InternalValueRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.seagate.kinetic.proto.InternalValueRecord.value)
  return value_;
}
inline ::std::string* InternalValueRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InternalValueRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.seagate.kinetic.proto.InternalValueRecord.value)
}

// required bytes tag = 3;
inline bool InternalValueRecord::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InternalValueRecord::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InternalValueRecord::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InternalValueRecord::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& InternalValueRecord::tag() const {
  // @@protoc_insertion_point(field_get:com.seagate.kinetic.proto.InternalValueRecord.tag)
  return *tag_;
}
inline void InternalValueRecord::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:com.seagate.kinetic.proto.InternalValueRecord.tag)
}
inline void InternalValueRecord::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.seagate.kinetic.proto.InternalValueRecord.tag)
}
inline void InternalValueRecord::set_tag(const void* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.seagate.kinetic.proto.InternalValueRecord.tag)
}
inline ::std::string* InternalValueRecord::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.seagate.kinetic.proto.InternalValueRecord.tag)
  return tag_;
}
inline ::std::string* InternalValueRecord::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InternalValueRecord::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.seagate.kinetic.proto.InternalValueRecord.tag)
}

// optional int32 algorithm = 4;
inline bool InternalValueRecord::has_algorithm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InternalValueRecord::set_has_algorithm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InternalValueRecord::clear_has_algorithm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InternalValueRecord::clear_algorithm() {
  algorithm_ = 0;
  clear_has_algorithm();
}
inline ::google::protobuf::int32 InternalValueRecord::algorithm() const {
  // @@protoc_insertion_point(field_get:com.seagate.kinetic.proto.InternalValueRecord.algorithm)
  return algorithm_;
}
inline void InternalValueRecord::set_algorithm(::google::protobuf::int32 value) {
  set_has_algorithm();
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:com.seagate.kinetic.proto.InternalValueRecord.algorithm)
}

// optional bool badData = 5;
inline bool InternalValueRecord::has_baddata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InternalValueRecord::set_has_baddata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InternalValueRecord::clear_has_baddata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InternalValueRecord::clear_baddata() {
  baddata_ = false;
  clear_has_baddata();
}
inline bool InternalValueRecord::baddata() const {
  // @@protoc_insertion_point(field_get:com.seagate.kinetic.proto.InternalValueRecord.badData)
  return baddata_;
}
inline void InternalValueRecord::set_baddata(bool value) {
  set_has_baddata();
  baddata_ = value;
  // @@protoc_insertion_point(field_set:com.seagate.kinetic.proto.InternalValueRecord.badData)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kinetic
}  // namespace seagate
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_internal_5fvalue_5frecord_2eproto__INCLUDED
