// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_value_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "internal_value_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace seagate {
namespace kinetic {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* InternalValueRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalValueRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_internal_5fvalue_5frecord_2eproto() {
  protobuf_AddDesc_internal_5fvalue_5frecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "internal_value_record.proto");
  GOOGLE_CHECK(file != NULL);
  InternalValueRecord_descriptor_ = file->message_type(0);
  static const int InternalValueRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, baddata_),
  };
  InternalValueRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalValueRecord_descriptor_,
      InternalValueRecord::default_instance_,
      InternalValueRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalValueRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalValueRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_internal_5fvalue_5frecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalValueRecord_descriptor_, &InternalValueRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_internal_5fvalue_5frecord_2eproto() {
  delete InternalValueRecord::default_instance_;
  delete InternalValueRecord_reflection_;
}

void protobuf_AddDesc_internal_5fvalue_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033internal_value_record.proto\022\031com.seaga"
    "te.kinetic.proto\"f\n\023InternalValueRecord\022"
    "\017\n\007version\030\001 \002(\014\022\r\n\005value\030\002 \001(\014\022\013\n\003tag\030\003"
    " \002(\014\022\021\n\talgorithm\030\004 \001(\005\022\017\n\007badData\030\005 \001(\010", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "internal_value_record.proto", &protobuf_RegisterTypes);
  InternalValueRecord::default_instance_ = new InternalValueRecord();
  InternalValueRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_internal_5fvalue_5frecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_internal_5fvalue_5frecord_2eproto {
  StaticDescriptorInitializer_internal_5fvalue_5frecord_2eproto() {
    protobuf_AddDesc_internal_5fvalue_5frecord_2eproto();
  }
} static_descriptor_initializer_internal_5fvalue_5frecord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InternalValueRecord::kVersionFieldNumber;
const int InternalValueRecord::kValueFieldNumber;
const int InternalValueRecord::kTagFieldNumber;
const int InternalValueRecord::kAlgorithmFieldNumber;
const int InternalValueRecord::kBadDataFieldNumber;
#endif  // !_MSC_VER

InternalValueRecord::InternalValueRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.seagate.kinetic.proto.InternalValueRecord)
}

void InternalValueRecord::InitAsDefaultInstance() {
}

InternalValueRecord::InternalValueRecord(const InternalValueRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.seagate.kinetic.proto.InternalValueRecord)
}

void InternalValueRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  baddata_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalValueRecord::~InternalValueRecord() {
  // @@protoc_insertion_point(destructor:com.seagate.kinetic.proto.InternalValueRecord)
  SharedDtor();
}

void InternalValueRecord::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void InternalValueRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalValueRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalValueRecord_descriptor_;
}

const InternalValueRecord& InternalValueRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fvalue_5frecord_2eproto();
  return *default_instance_;
}

InternalValueRecord* InternalValueRecord::default_instance_ = NULL;

InternalValueRecord* InternalValueRecord::New() const {
  return new InternalValueRecord;
}

void InternalValueRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InternalValueRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(algorithm_, baddata_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalValueRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.seagate.kinetic.proto.InternalValueRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // required bytes tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_algorithm;
        break;
      }

      // optional int32 algorithm = 4;
      case 4: {
        if (tag == 32) {
         parse_algorithm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algorithm_)));
          set_has_algorithm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_badData;
        break;
      }

      // optional bool badData = 5;
      case 5: {
        if (tag == 40) {
         parse_badData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &baddata_)));
          set_has_baddata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.seagate.kinetic.proto.InternalValueRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.seagate.kinetic.proto.InternalValueRecord)
  return false;
#undef DO_
}

void InternalValueRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.seagate.kinetic.proto.InternalValueRecord)
  // required bytes version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // required bytes tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tag(), output);
  }

  // optional int32 algorithm = 4;
  if (has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->algorithm(), output);
  }

  // optional bool badData = 5;
  if (has_baddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->baddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.seagate.kinetic.proto.InternalValueRecord)
}

::google::protobuf::uint8* InternalValueRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.seagate.kinetic.proto.InternalValueRecord)
  // required bytes version = 1;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required bytes tag = 3;
  if (has_tag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tag(), target);
  }

  // optional int32 algorithm = 4;
  if (has_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->algorithm(), target);
  }

  // optional bool badData = 5;
  if (has_baddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->baddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.seagate.kinetic.proto.InternalValueRecord)
  return target;
}

int InternalValueRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required bytes tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }

    // optional int32 algorithm = 4;
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algorithm());
    }

    // optional bool badData = 5;
    if (has_baddata()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalValueRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalValueRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalValueRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalValueRecord::MergeFrom(const InternalValueRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_algorithm()) {
      set_algorithm(from.algorithm());
    }
    if (from.has_baddata()) {
      set_baddata(from.baddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalValueRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalValueRecord::CopyFrom(const InternalValueRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalValueRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void InternalValueRecord::Swap(InternalValueRecord* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(value_, other->value_);
    std::swap(tag_, other->tag_);
    std::swap(algorithm_, other->algorithm_);
    std::swap(baddata_, other->baddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalValueRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalValueRecord_descriptor_;
  metadata.reflection = InternalValueRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kinetic
}  // namespace seagate
}  // namespace com

// @@protoc_insertion_point(global_scope)
