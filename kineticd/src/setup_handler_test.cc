#include "gtest/gtest.h"
#include "kinetic/incoming_value.h"

#include "setup_handler.h"
#include "mock_authorizer.h"
#include "mock_skinny_waist.h"
#include "mock_cluster_version_store.h"
#include "mock_device_information.h"
#include "user_store.h"
#include "domain.h"
#include "profiler.h"
#include "authorizer.h"
#include "limits.h"
#include <fstream>

using namespace com::seagate::kinetic::proto; //NOLINT

namespace com {
namespace seagate {
namespace kinetic {

using ::kinetic::IncomingStringValue;
using com::seagate::kinetic::Limits;

using ::testing::_;
using ::testing::Return;
using ::testing::SetArgPointee;
using ::testing::NiceMock;

class SetupHandlerTest: public ::testing::Test {
    protected:
    SetupHandlerTest():
            mock_authorizer_(),
            mock_skinny_waist_(),
            mock_cluster_version_store_(),
            security_handler_(),
            device_information_(),
            setup_handler_(mock_authorizer_, mock_skinny_waist_,
                    mock_cluster_version_store_, "/tmp", security_handler_, device_information_),
            empty_value_("")
    { }

    virtual void SetUp() {
    }

    MockAuthorizer mock_authorizer_;
    MockSkinnyWaist mock_skinny_waist_;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store_;
    MockSecurityHandler security_handler_;
    MockDeviceInformation device_information_;
    SetupHandler setup_handler_;
    IncomingStringValue empty_value_;
};

TEST_F(SetupHandlerTest, SetupSetsClusterVersion) {
    EXPECT_CALL(mock_authorizer_, AuthorizeGlobal(42, Domain::kSetup, _)).WillOnce(Return(true));
    Command command;
    command.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    command.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_CLUSTER_VERSION_SETUPOP);
    command.mutable_body()->mutable_setup()->set_newclusterversion(99);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    EXPECT_CALL(mock_cluster_version_store_, SetClusterVersion(99)).WillOnce(Return(true));
    setup_handler_.ProcessRequest(command, &empty_value_, &response, request_context, 42);

    EXPECT_EQ(Command_Status_StatusCode_SUCCESS, response.status().code());
}

TEST_F(SetupHandlerTest, SetupReturnsErrorIfSettingClusterVersionFails) {
    EXPECT_CALL(mock_authorizer_, AuthorizeGlobal(42, Domain::kSetup, _)).WillOnce(Return(true));
    Command command;
    command.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    command.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_CLUSTER_VERSION_SETUPOP);
    command.mutable_body()->mutable_setup()->set_newclusterversion(99);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    EXPECT_CALL(mock_cluster_version_store_, SetClusterVersion(99)).WillOnce(Return(false));
    setup_handler_.ProcessRequest(command, &empty_value_, &response, request_context, 42);

    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
}

TEST_F(SetupHandlerTest, SetupReturnsErrorIfSettingClusterVersionWithoutAuthorization) {
    EXPECT_CALL(mock_authorizer_, AuthorizeGlobal(42, Domain::kSetup, _)).WillOnce(Return(false));
    Command command;
    command.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    command.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_CLUSTER_VERSION_SETUPOP);
    command.mutable_body()->mutable_setup()->set_newclusterversion(99);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler_.ProcessRequest(command, &empty_value_, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_NOT_AUTHORIZED, response.status().code());
}

TEST_F(SetupHandlerTest, SetupFirmwareUploadFailsIfNotAuthorized) {
    EXPECT_CALL(mock_authorizer_, AuthorizeGlobal(42, Domain::kSetup, _)).WillOnce(Return(false));
    Command command;
    command.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    command.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    IncomingStringValue string_value("Test");

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler_.ProcessRequest(command, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_NOT_AUTHORIZED, response.status().code());
}

// Don't use the main fixture because this test cannot exercise mocks.
// The mock's destructor won't run in the child process (which exit()'s), thereby causing google
// mock to complain about an un-cleaned-up-mock.
// Instead, we will setup the user-store & authorization properly.
// Note: We will use some mocks that are not exercised. This does not cause the issue.
TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfTagIsIncorrect) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // LODHeader with an invalid tag signature
    char firmware[64] = {
        0x77, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc9), static_cast<char>(0x99)
    };

    std::string firmware_file(firmware, 64);
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Cannot update firmware. Firmware is not valid", response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}

TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfChecksumIsIncorrect) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // LODHeader with an invalid check sum
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc9), static_cast<char>(0x99)
    };

    std::string firmware_file(firmware, 64);
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Cannot update firmware. Firmware is not valid", response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}

TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfBlockPointIsIncorrect) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    EXPECT_CALL(device_information, GetPortionFull(_))
        .WillOnce(DoAll(
            SetArgPointee<0>(0.5),
            Return(true)));

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // kinetic LODHeader with an incorrect blockpoint
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x27, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc9), static_cast<char>(0x98)
    };

    // Thumbprint lod header
    char thumbprint_lod_header[64] = {
        0x78, 0x03, 0x28, 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x27, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xd3), static_cast<char>(0x96)
    };

    char thumbprint_payload[256] = {
        static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89)
    };

    // Security info lod header
    char security_info_lod_header[64] = {
        static_cast<char>(0xe7), 0x1a, 0x0e,
        0x59, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, static_cast<char>(0xef),
        static_cast<char>(0x87)
    };

    // Security signature lod header
    char security_signature_lod_header[64] = {
        0x05, 0x29, static_cast<char>(0x94), static_cast<char>(0xa6),
        0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x40, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    // Signature
    char signature_payload[576] = {
        static_cast<char>(0x83),
        static_cast<char>(0xe3), static_cast<char>(0x83), 0x61, 0x36, 0x20, static_cast<char>(0x95), 0x79,
        static_cast<char>(0x97), 0x5c, 0x05, static_cast<char>(0xa5), static_cast<char>(0xd2), 0x05,
        static_cast<char>(0xcb), static_cast<char>(0xaf), static_cast<char>(0xea), static_cast<char>(0xef),
        static_cast<char>(0x98), 0x40, static_cast<char>(0xe7), static_cast<char>(0x87), static_cast<char>(0x99),
        static_cast<char>(0xf4), static_cast<char>(0xde), 0x4d, 0x53, 0x64, static_cast<char>(0xff), 0x31, 0x4b,
        static_cast<char>(0xd4), static_cast<char>(0xb6), static_cast<char>(0xe7), static_cast<char>(0xab), 0x1e, 0x1e,
        0x7e, static_cast<char>(0xe9), 0x20, static_cast<char>(0xf1), static_cast<char>(0xc5), 0x4a,
        0x3f, 0x2a, static_cast<char>(0xb3), static_cast<char>(0xef), static_cast<char>(0xbf), 0x2b,
        static_cast<char>(0x8a), 0x10, static_cast<char>(0xc9), static_cast<char>(0x8b), static_cast<char>(0xb4), 0x4a,
        static_cast<char>(0xcf), 0x59, static_cast<char>(0x9c), 0x2a, 0x59, 0x7f, 0x4b, 0x4f, static_cast<char>(0xe8), 0x01,
        0x46, 0x55, static_cast<char>(0xb0), static_cast<char>(0xd3), static_cast<char>(0xe8),
        static_cast<char>(0xfc), static_cast<char>(0xb6), 0x6a, 0x2e, 0x27, static_cast<char>(0xa5), 0x67, 0x4f,
        static_cast<char>(0xba), 0x31, static_cast<char>(0x8e), static_cast<char>(0x8a), 0x0e, 0x67,
        static_cast<char>(0x97), static_cast<char>(0xb9), static_cast<char>(0xf2), static_cast<char>(0x9c),
        static_cast<char>(0x96), 0x04, static_cast<char>(0xc8), static_cast<char>(0x8c), static_cast<char>(0xd0),
        static_cast<char>(0x92), 0x31, static_cast<char>(0xe7), static_cast<char>(0xae), static_cast<char>(0xbf),
        static_cast<char>(0x92), static_cast<char>(0xe8), static_cast<char>(0x8e), 0x01, 0x19, 0x12, 0x0a,
        static_cast<char>(0x98), static_cast<char>(0xa8), 0x07, static_cast<char>(0xfe), 0x59, static_cast<char>(0x99),
        static_cast<char>(0x8b), 0x3a, 0x7a, static_cast<char>(0xe5), 0x6d, static_cast<char>(0xdb),
        static_cast<char>(0x98), static_cast<char>(0xe3), static_cast<char>(0xf0), static_cast<char>(0xdf), 0x7b,
        static_cast<char>(0xbb), 0x37, 0x36, 0x66, 0x26, 0x04, static_cast<char>(0xa1), static_cast<char>(0xd4),
        static_cast<char>(0xd7), static_cast<char>(0x8a), 0x74, 0x7b, 0x30, 0x58, static_cast<char>(0x98),
        static_cast<char>(0xf6), 0x46, 0x3b, static_cast<char>(0x91), static_cast<char>(0xda), static_cast<char>(0xd5),
        static_cast<char>(0xc7), 0x78, static_cast<char>(0x89), static_cast<char>(0x9c), 0x36, 0x78,
        static_cast<char>(0xf3), 0x14, static_cast<char>(0xfb), 0x73, 0x37, 0x03, static_cast<char>(0x94), 0x73,
        static_cast<char>(0x97), static_cast<char>(0x8f), static_cast<char>(0xde), static_cast<char>(0xf3),
        static_cast<char>(0xf9), 0x3f, 0x64, 0x22, static_cast<char>(0xc4), static_cast<char>(0x87), 0x44, 0x4d,
        static_cast<char>(0xe0), static_cast<char>(0xa1), static_cast<char>(0xbb), 0x28, static_cast<char>(0xc7),
        static_cast<char>(0xb2), static_cast<char>(0xd8), 0x1a, static_cast<char>(0xd6), 0x78, 0x1d, 0x74,
        static_cast<char>(0x9a), 0x11, 0x66, static_cast<char>(0xf7), 0x72, static_cast<char>(0xa7),
        static_cast<char>(0xc0), 0x0b, static_cast<char>(0x80), 0x10, static_cast<char>(0xa8), 0x5e,
        static_cast<char>(0xb7), static_cast<char>(0xa6), static_cast<char>(0xda), static_cast<char>(0xfa), 0x0d, 0x28,
        0x60, static_cast<char>(0xf3), static_cast<char>(0xf7), 0x19, 0x17, static_cast<char>(0xdf),
        static_cast<char>(0xce), 0x56, 0x57, static_cast<char>(0xf4), 0x12, 0x48, static_cast<char>(0xbb), 0x4b,
        static_cast<char>(0xe5), 0x5d, 0x5d, static_cast<char>(0xbe), static_cast<char>(0x89), 0x7e, 0x73, 0x2b,
        static_cast<char>(0xc2), 0x1d, 0x25, static_cast<char>(0xb2), static_cast<char>(0xa2), 0x4d, 0x24, 0x4f,
        static_cast<char>(0xdc), 0x73, 0x43, 0x20, static_cast<char>(0xc5), 0x54, 0x3a, 0x2f, 0x70, static_cast<char>(0xeb),
        0x0a, static_cast<char>(0xa0), 0x22, static_cast<char>(0xb4), 0x4b, static_cast<char>(0x90),
        0x5a, 0x5a, static_cast<char>(0x8c), static_cast<char>(0xd6), 0x36, 0x20, 0x49,
        static_cast<char>(0xbd), static_cast<char>(0xcb), 0x6d, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x67, 0x56, 0x35, 0x3b, static_cast<char>(0x92), 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e,
        0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e, 0x31, 0x2e, 0x36, 0x30, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e,
        0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x32,
        0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, static_cast<char>(0xf8)
    };

    std::string firmware_file(firmware, 64);
    std::string thumb_lod_header(thumbprint_lod_header, 64);
    std::string thumb_payload(thumbprint_payload, 256);
    std::string security_info(security_info_lod_header, 64);
    std::string security_signature(security_signature_lod_header, 64);
    std::string signature(signature_payload, 576);

    // add payload
    firmware_file.append("\x54\x65\x73\x74\x0a");
    // add security info
    firmware_file.append(security_info);
    firmware_file.append(thumb_lod_header);
    firmware_file.append(thumb_payload);
    firmware_file.append(security_signature);
    firmware_file.append(signature);

    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    EXPECT_CALL(security_handler, VerifySecuritySignature(_, _, _)).WillOnce(Return(true));
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Format block point. Need to ISE drive before you can update firmware",
        response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}

TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfThumbprintIsIncorrect) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc8), static_cast<char>(0x99)
    };

    std::string firmware_file(firmware, 64);
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Cannot update firmware. Firmware is not valid", response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}


TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfSignatureIsNotProvided) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // Valid lod header
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc8), static_cast<char>(0x99)
    };

    // Thumbprint lod header
    char thumbprint_lod_header[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xd2), static_cast<char>(0x97)
    };

    char thumbprint_payload[256] = {
        static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89)
    };

    std::string firmware_file(firmware, 64);
    std::string thumb_lod_header(thumbprint_lod_header, 64);
    std::string thumb_payload(thumbprint_payload, 256);
    // add payload
    firmware_file.append("\x54\x65\x73\x74\x0a");
    firmware_file.append(thumb_lod_header);
    firmware_file.append(thumb_payload);
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Cannot update firmware. Firmware is not valid", response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}

TEST(FirmwareTest, SetupFirmwareUploadReturnsErrorIfNotValidSecuritySignature) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // Valid lod header
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc8), static_cast<char>(0x99)
    };

    // Thumbprint lod header
    char thumbprint_lod_header[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xd2), static_cast<char>(0x97)
    };

    char thumbprint_payload[256] = {
        static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89)
    };

    // Security info lod header
    char security_info_lod_header[64] = {
        static_cast<char>(0xe7), 0x1a, 0x0e,
        0x59, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, static_cast<char>(0xef),
        static_cast<char>(0x87)
    };

    // Security signature lod header
    char security_signature_lod_header[64] = {
        0x05, 0x29, static_cast<char>(0x94), static_cast<char>(0xa6),
        0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x40, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    // Signature
    char signature_payload[576] = {
        0x79, 0x57, 0x1b,
        static_cast<char>(0x99), static_cast<char>(0x87), 0x21, 0x2b, static_cast<char>(0xae), static_cast<char>(0xc2),
        static_cast<char>(0xef), static_cast<char>(0xbf), 0x32, static_cast<char>(0xbe), 0x74, 0x76, 0x0b,
        static_cast<char>(0x83), static_cast<char>(0x80), 0x20, 0x3e, 0x78, 0x19, 0x06, static_cast<char>(0xbc),
        static_cast<char>(0x85), static_cast<char>(0xb6), 0x67, 0x73, 0x54, 0x77, 0x27, 0x72, 0x56, 0x59,
        static_cast<char>(0xf8), 0x6e, static_cast<char>(0xbd), 0x14, static_cast<char>(0xb8), static_cast<char>(0xdf),
        static_cast<char>(0xdf), 0x30, static_cast<char>(0x81), static_cast<char>(0xe7), static_cast<char>(0xae),
        static_cast<char>(0xc5), 0x34, static_cast<char>(0xc9), 0x56, 0x0a, static_cast<char>(0xaa), 0x3a,
        static_cast<char>(0xb2), static_cast<char>(0xba), 0x12, 0x51, static_cast<char>(0x8f), 0x50, 0x3e, 0x46,
        static_cast<char>(0x8d), static_cast<char>(0xe0), 0x51, static_cast<char>(0xe1), 0x4f, 0x76,
        static_cast<char>(0xcc), static_cast<char>(0x9b), 0x64, 0x1d, 0x00, 0x04, static_cast<char>(0xb3), 0x57,
        static_cast<char>(0xed), 0x4f, 0x79, static_cast<char>(0xbb), static_cast<char>(0xe9), static_cast<char>(0x95),
        static_cast<char>(0xfb), static_cast<char>(0x93), static_cast<char>(0xc6), static_cast<char>(0xc6),
        static_cast<char>(0xce), static_cast<char>(0xd3), static_cast<char>(0x97), static_cast<char>(0xab), 0x2e,
        static_cast<char>(0xfb), 0x2a, static_cast<char>(0xae), static_cast<char>(0xd1), static_cast<char>(0xc8), 0x3e,
        0x71, 0x25, static_cast<char>(0xe5), static_cast<char>(0xb4), 0x5a, static_cast<char>(0xa9),
        static_cast<char>(0x8d), 0x28, 0x0c, static_cast<char>(0x88), static_cast<char>(0xae), 0x6a,
        static_cast<char>(0x9b), static_cast<char>(0xce), static_cast<char>(0xbc), static_cast<char>(0xa1),
        static_cast<char>(0xe6), static_cast<char>(0xb1), static_cast<char>(0xe4), static_cast<char>(0xe1), 0x3a, 0x01,
        static_cast<char>(0xae), static_cast<char>(0xc6), static_cast<char>(0xec), static_cast<char>(0xea), 0x6d, 0x61,
        static_cast<char>(0xc2), 0x46, static_cast<char>(0xc9), static_cast<char>(0xb3), static_cast<char>(0xbf),
        static_cast<char>(0xc3), 0x44, static_cast<char>(0xd8), static_cast<char>(0x86), static_cast<char>(0xa9),
        static_cast<char>(0xed), static_cast<char>(0xe8), 0x3d, static_cast<char>(0x8a), 0x50, 0x7b,
        static_cast<char>(0xa0), 0x3f, static_cast<char>(0x81), static_cast<char>(0x86), static_cast<char>(0xa3),
        static_cast<char>(0xd8), 0x57, static_cast<char>(0xf6), static_cast<char>(0xfa), static_cast<char>(0xad),
        static_cast<char>(0x83), static_cast<char>(0xdf), static_cast<char>(0xac), static_cast<char>(0xe0),
        static_cast<char>(0xbc), 0x00, static_cast<char>(0xeb), static_cast<char>(0xfd), 0x2c, static_cast<char>(0xc0),
        static_cast<char>(0x9c), static_cast<char>(0xe6), 0x46, static_cast<char>(0xc1), 0x34, 0x69, 0x56,
        static_cast<char>(0xaf), static_cast<char>(0x83), 0x6b, static_cast<char>(0xbe), 0x57, static_cast<char>(0x96),
        static_cast<char>(0xd0), static_cast<char>(0xb6), static_cast<char>(0xed), 0x4c, static_cast<char>(0xc7),
        static_cast<char>(0xd1), 0x2b, static_cast<char>(0xd7), 0x1f, 0x6b, static_cast<char>(0x9f), 0x17, 0x4d, 0x4c,
        static_cast<char>(0xb1), 0x64, static_cast<char>(0xd7), static_cast<char>(0x84), 0x0c, 0x40,
        static_cast<char>(0xa7), static_cast<char>(0xca), static_cast<char>(0x8d), static_cast<char>(0xb1), 0x65,
        static_cast<char>(0xcf), 0x12, static_cast<char>(0xf5), static_cast<char>(0xca), 0x01, 0x63,
        static_cast<char>(0xf8), 0x53, static_cast<char>(0x9e), static_cast<char>(0xef), static_cast<char>(0xe0),
        static_cast<char>(0x9b), static_cast<char>(0x9e), static_cast<char>(0x8c), static_cast<char>(0x84), 0x72,
        static_cast<char>(0xff), 0x64, static_cast<char>(0xa8), 0x6a, static_cast<char>(0xd9), 0x18, 0x48, 0x7f, 0x27, 0x33,
        static_cast<char>(0x8a), static_cast<char>(0x85), 0x1d, static_cast<char>(0xf2), static_cast<char>(0x9d),
        static_cast<char>(0x84), static_cast<char>(0xe7), static_cast<char>(0xfb), 0x0e, static_cast<char>(0x99),
        static_cast<char>(0xfe), 0x19, static_cast<char>(0xc5), static_cast<char>(0xed), 0x4c, static_cast<char>(0xde),
        static_cast<char>(0xba), static_cast<char>(0xd6), static_cast<char>(0xed), static_cast<char>(0xe8), 0x34,
        static_cast<char>(0xd7), 0x61, 0x6d, 0x76, 0x11, 0x75, static_cast<char>(0xe9), static_cast<char>(0xde), 0x23,
        static_cast<char>(0xa1), static_cast<char>(0xa3), static_cast<char>(0xa5), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x67, 0x52, 0x18, static_cast<char>(0xec), static_cast<char>(0xa8), 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x31, 0x2e, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x32, 0x2e, 0x31, 0x2e, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        static_cast<char>(0xf8)
    };

    std::string firmware_file(firmware, 64);
    std::string thumb_lod_header(thumbprint_lod_header, 64);
    std::string thumb_payload(thumbprint_payload, 256);
    std::string security_info(security_info_lod_header, 64);
    std::string security_signature(security_signature_lod_header, 64);
    std::string signature(signature_payload, 576);

    // add payload
    firmware_file.append("\x54\x65\x73\x74\x0a");
    // add security info
    firmware_file.append(security_info);
    firmware_file.append(thumb_lod_header);
    firmware_file.append(thumb_payload);
    firmware_file.append(security_signature);
    firmware_file.append(signature);

    // add thumbprint lodheader and payload
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;

    EXPECT_CALL(security_handler, VerifySecuritySignature(_, _, _)).WillOnce(Return(false));
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_INTERNAL_ERROR, response.status().code());
    EXPECT_EQ("Cannot update firmware. Firmware is not valid", response.status().statusmessage());

    unlink(fifo);
    errno = 0;
}

TEST(FirmwareTest, SetupFirmwareUploadReturnsSuccess) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // Valid lod header
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc8), static_cast<char>(0x99)
    };

    // Thumbprint lod header
    char thumbprint_lod_header[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xd2), static_cast<char>(0x97)
    };

    char thumbprint_payload[256] = {
        static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89)
    };

    // Security info lod header
    char security_info_lod_header[64] = {
        static_cast<char>(0xe7), 0x1a, 0x0e,
        0x59, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, static_cast<char>(0xef),
        static_cast<char>(0x87)
    };

    // Security signature lod header
    char security_signature_lod_header[64] = {
        0x05, 0x29, static_cast<char>(0x94), static_cast<char>(0xa6),
        0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x40, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    // Signature
    char signature_payload[576] = {
        0x78, 0x57, 0x1b,
        static_cast<char>(0x99), static_cast<char>(0x87), 0x21, 0x2b, static_cast<char>(0xae), static_cast<char>(0xc2),
        static_cast<char>(0xef), static_cast<char>(0xbf), 0x32, static_cast<char>(0xbe), 0x74, 0x76, 0x0b,
        static_cast<char>(0x83), static_cast<char>(0x80), 0x20, 0x3e, 0x78, 0x19, 0x06, static_cast<char>(0xbc),
        static_cast<char>(0x85), static_cast<char>(0xb6), 0x67, 0x73, 0x54, 0x77, 0x27, 0x72, 0x56, 0x59,
        static_cast<char>(0xf8), 0x6e, static_cast<char>(0xbd), 0x14, static_cast<char>(0xb8), static_cast<char>(0xdf),
        static_cast<char>(0xdf), 0x30, static_cast<char>(0x81), static_cast<char>(0xe7), static_cast<char>(0xae),
        static_cast<char>(0xc5), 0x34, static_cast<char>(0xc9), 0x56, 0x0a, static_cast<char>(0xaa), 0x3a,
        static_cast<char>(0xb2), static_cast<char>(0xba), 0x12, 0x51, static_cast<char>(0x8f), 0x50, 0x3e, 0x46,
        static_cast<char>(0x8d), static_cast<char>(0xe0), 0x51, static_cast<char>(0xe1), 0x4f, 0x76,
        static_cast<char>(0xcc), static_cast<char>(0x9b), 0x64, 0x1d, 0x00, 0x04, static_cast<char>(0xb3), 0x57,
        static_cast<char>(0xed), 0x4f, 0x79, static_cast<char>(0xbb), static_cast<char>(0xe9), static_cast<char>(0x95),
        static_cast<char>(0xfb), static_cast<char>(0x93), static_cast<char>(0xc6), static_cast<char>(0xc6),
        static_cast<char>(0xce), static_cast<char>(0xd3), static_cast<char>(0x97), static_cast<char>(0xab), 0x2e,
        static_cast<char>(0xfb), 0x2a, static_cast<char>(0xae), static_cast<char>(0xd1), static_cast<char>(0xc8), 0x3e,
        0x71, 0x25, static_cast<char>(0xe5), static_cast<char>(0xb4), 0x5a, static_cast<char>(0xa9),
        static_cast<char>(0x8d), 0x28, 0x0c, static_cast<char>(0x88), static_cast<char>(0xae), 0x6a,
        static_cast<char>(0x9b), static_cast<char>(0xce), static_cast<char>(0xbc), static_cast<char>(0xa1),
        static_cast<char>(0xe6), static_cast<char>(0xb1), static_cast<char>(0xe4), static_cast<char>(0xe1), 0x3a, 0x01,
        static_cast<char>(0xae), static_cast<char>(0xc6), static_cast<char>(0xec), static_cast<char>(0xea), 0x6d, 0x61,
        static_cast<char>(0xc2), 0x46, static_cast<char>(0xc9), static_cast<char>(0xb3), static_cast<char>(0xbf),
        static_cast<char>(0xc3), 0x44, static_cast<char>(0xd8), static_cast<char>(0x86), static_cast<char>(0xa9),
        static_cast<char>(0xed), static_cast<char>(0xe8), 0x3d, static_cast<char>(0x8a), 0x50, 0x7b,
        static_cast<char>(0xa0), 0x3f, static_cast<char>(0x81), static_cast<char>(0x86), static_cast<char>(0xa3),
        static_cast<char>(0xd8), 0x57, static_cast<char>(0xf6), static_cast<char>(0xfa), static_cast<char>(0xad),
        static_cast<char>(0x83), static_cast<char>(0xdf), static_cast<char>(0xac), static_cast<char>(0xe0),
        static_cast<char>(0xbc), 0x00, static_cast<char>(0xeb), static_cast<char>(0xfd), 0x2c, static_cast<char>(0xc0),
        static_cast<char>(0x9c), static_cast<char>(0xe6), 0x46, static_cast<char>(0xc1), 0x34, 0x69, 0x56,
        static_cast<char>(0xaf), static_cast<char>(0x83), 0x6b, static_cast<char>(0xbe), 0x57, static_cast<char>(0x96),
        static_cast<char>(0xd0), static_cast<char>(0xb6), static_cast<char>(0xed), 0x4c, static_cast<char>(0xc7),
        static_cast<char>(0xd1), 0x2b, static_cast<char>(0xd7), 0x1f, 0x6b, static_cast<char>(0x9f), 0x17, 0x4d, 0x4c,
        static_cast<char>(0xb1), 0x64, static_cast<char>(0xd7), static_cast<char>(0x84), 0x0c, 0x40,
        static_cast<char>(0xa7), static_cast<char>(0xca), static_cast<char>(0x8d), static_cast<char>(0xb1), 0x65,
        static_cast<char>(0xcf), 0x12, static_cast<char>(0xf5), static_cast<char>(0xca), 0x01, 0x63,
        static_cast<char>(0xf8), 0x53, static_cast<char>(0x9e), static_cast<char>(0xef), static_cast<char>(0xe0),
        static_cast<char>(0x9b), static_cast<char>(0x9e), static_cast<char>(0x8c), static_cast<char>(0x84), 0x72,
        static_cast<char>(0xff), 0x64, static_cast<char>(0xa8), 0x6a, static_cast<char>(0xd9), 0x18, 0x48, 0x7f, 0x27, 0x33,
        static_cast<char>(0x8a), static_cast<char>(0x85), 0x1d, static_cast<char>(0xf2), static_cast<char>(0x9d),
        static_cast<char>(0x84), static_cast<char>(0xe7), static_cast<char>(0xfb), 0x0e, static_cast<char>(0x99),
        static_cast<char>(0xfe), 0x19, static_cast<char>(0xc5), static_cast<char>(0xed), 0x4c, static_cast<char>(0xde),
        static_cast<char>(0xba), static_cast<char>(0xd6), static_cast<char>(0xed), static_cast<char>(0xe8), 0x34,
        static_cast<char>(0xd7), 0x61, 0x6d, 0x76, 0x11, 0x75, static_cast<char>(0xe9), static_cast<char>(0xde), 0x23,
        static_cast<char>(0xa1), static_cast<char>(0xa3), static_cast<char>(0xa5), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x67, 0x52, 0x18, static_cast<char>(0xec), static_cast<char>(0xa8), 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x31, 0x2e, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x32, 0x2e, 0x31, 0x2e, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        static_cast<char>(0xf8)
    };

    std::string firmware_file(firmware, 64);
    std::string thumb_lod_header(thumbprint_lod_header, 64);
    std::string thumb_payload(thumbprint_payload, 256);
    std::string security_info(security_info_lod_header, 64);
    std::string security_signature(security_signature_lod_header, 64);
    std::string signature(signature_payload, 576);

    // add payload
    firmware_file.append("\x54\x65\x73\x74\x0a");
    // add security info
    firmware_file.append(security_info);
    firmware_file.append(thumb_lod_header);
    firmware_file.append(thumb_payload);
    firmware_file.append(security_signature);
    firmware_file.append(signature);

    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;

    EXPECT_CALL(security_handler, VerifySecuritySignature(_, _, _)).WillOnce(Return(true));
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42);
    EXPECT_EQ(Command_Status_StatusCode_SUCCESS, response.status().code());
    unlink(fifo);
}

TEST(FirmwareTest, SetupFirmwareUploadDoesNotGetCapacityIfStoreIsCorrupt) {
    Limits limits(100, 100, 100, 1024, 1024, 10, 10, 10, 10, 100, 32, 64*1024*1024, 24000);
    UserStore user_store(std::move(unique_ptr<CautiousFileHandlerInterface>(
        new BlackholeCautiousFileHandler())), limits);
    Profiler profiler;
    Authorizer authorizer(user_store, profiler, limits);
    MockSkinnyWaist mock_skinny_waist;
    NiceMock<MockClusterVersionStore> mock_cluster_version_store;
    MockSecurityHandler security_handler;
    MockDeviceInformation device_information;
    SetupHandler setup_handler(authorizer, mock_skinny_waist,
        mock_cluster_version_store, "/tmp", security_handler, device_information);

    // Add the user with kSetup permission to user store:
    Domain domain(0, "", Domain::kSetup, false);
    std::list<Domain> domains;
    domains.push_back(domain);
    User test_user(42, "super secret", domains);
    std::list<User> users;
    users.push_back(test_user);
    ASSERT_EQ(UserStoreInterface::Status::SUCCESS, user_store.Put(users));

    // make sure the touched file is removed
    char const *fifo = "/tmp/kinetic-firmware-update-fifo";
    // perfectly fine for this unlink to fail; if test was cleaned up properly last time, it fails
    unlink(fifo);

    mkfifo(fifo, S_IRUSR | S_IWUSR);

    EXPECT_CALL(device_information, GetPortionFull(_)).Times(0);

    Command message;
    message.mutable_header()->set_messagetype(Command_MessageType_SETUP);
    message.mutable_body()->mutable_setup()->set_setupoptype(Command_Setup_SetupOpType_FIRMWARE_SETUPOP);

    // Valid lod header
    char firmware[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xc8), static_cast<char>(0x99)
    };

    // Thumbprint lod header
    char thumbprint_lod_header[64] = {
        0x78, 0x03, 0x28, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x11,
        0x26, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        static_cast<char>(0xd2), static_cast<char>(0x97)
    };

    char thumbprint_payload[256] = {
        static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9), static_cast<char>(0xd0), 0x4c,
        static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c, static_cast<char>(0x80), 0x68, 0x1f,
        static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29, static_cast<char>(0x93), static_cast<char>(0x80), 0x26,
        static_cast<char>(0x87), 0x1f, 0x66, static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d,
        static_cast<char>(0xf6), 0x69, 0x38, static_cast<char>(0xa7), static_cast<char>(0x89), static_cast<char>(0xc9),
        static_cast<char>(0xd0), 0x4c, static_cast<char>(0x95), 0x65, static_cast<char>(0xfc), 0x66, 0x5c,
        static_cast<char>(0x80), 0x68, 0x1f, static_cast<char>(0xb1), static_cast<char>(0xd8), 0x29,
        static_cast<char>(0x93), static_cast<char>(0x80), 0x26, static_cast<char>(0x87), 0x1f, 0x66,
        static_cast<char>(0xe1), 0x4f, 0x50, 0x1e, 0x08, 0x53, 0x1d, static_cast<char>(0xf6), 0x69, 0x38,
        static_cast<char>(0xa7), static_cast<char>(0x89)
    };

    // Security info lod header
    char security_info_lod_header[64] = {
        static_cast<char>(0xe7), 0x1a, 0x0e,
        0x59, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, static_cast<char>(0xef),
        static_cast<char>(0x87)
    };

    // Security signature lod header
    char security_signature_lod_header[64] = {
        0x05, 0x29, static_cast<char>(0x94), static_cast<char>(0xa6),
        0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x40, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d
    };

    // Signature
    char signature_payload[576] = {
        0x78, 0x57, 0x1b,
        static_cast<char>(0x99), static_cast<char>(0x87), 0x21, 0x2b, static_cast<char>(0xae), static_cast<char>(0xc2),
        static_cast<char>(0xef), static_cast<char>(0xbf), 0x32, static_cast<char>(0xbe), 0x74, 0x76, 0x0b,
        static_cast<char>(0x83), static_cast<char>(0x80), 0x20, 0x3e, 0x78, 0x19, 0x06, static_cast<char>(0xbc),
        static_cast<char>(0x85), static_cast<char>(0xb6), 0x67, 0x73, 0x54, 0x77, 0x27, 0x72, 0x56, 0x59,
        static_cast<char>(0xf8), 0x6e, static_cast<char>(0xbd), 0x14, static_cast<char>(0xb8), static_cast<char>(0xdf),
        static_cast<char>(0xdf), 0x30, static_cast<char>(0x81), static_cast<char>(0xe7), static_cast<char>(0xae),
        static_cast<char>(0xc5), 0x34, static_cast<char>(0xc9), 0x56, 0x0a, static_cast<char>(0xaa), 0x3a,
        static_cast<char>(0xb2), static_cast<char>(0xba), 0x12, 0x51, static_cast<char>(0x8f), 0x50, 0x3e, 0x46,
        static_cast<char>(0x8d), static_cast<char>(0xe0), 0x51, static_cast<char>(0xe1), 0x4f, 0x76,
        static_cast<char>(0xcc), static_cast<char>(0x9b), 0x64, 0x1d, 0x00, 0x04, static_cast<char>(0xb3), 0x57,
        static_cast<char>(0xed), 0x4f, 0x79, static_cast<char>(0xbb), static_cast<char>(0xe9), static_cast<char>(0x95),
        static_cast<char>(0xfb), static_cast<char>(0x93), static_cast<char>(0xc6), static_cast<char>(0xc6),
        static_cast<char>(0xce), static_cast<char>(0xd3), static_cast<char>(0x97), static_cast<char>(0xab), 0x2e,
        static_cast<char>(0xfb), 0x2a, static_cast<char>(0xae), static_cast<char>(0xd1), static_cast<char>(0xc8), 0x3e,
        0x71, 0x25, static_cast<char>(0xe5), static_cast<char>(0xb4), 0x5a, static_cast<char>(0xa9),
        static_cast<char>(0x8d), 0x28, 0x0c, static_cast<char>(0x88), static_cast<char>(0xae), 0x6a,
        static_cast<char>(0x9b), static_cast<char>(0xce), static_cast<char>(0xbc), static_cast<char>(0xa1),
        static_cast<char>(0xe6), static_cast<char>(0xb1), static_cast<char>(0xe4), static_cast<char>(0xe1), 0x3a, 0x01,
        static_cast<char>(0xae), static_cast<char>(0xc6), static_cast<char>(0xec), static_cast<char>(0xea), 0x6d, 0x61,
        static_cast<char>(0xc2), 0x46, static_cast<char>(0xc9), static_cast<char>(0xb3), static_cast<char>(0xbf),
        static_cast<char>(0xc3), 0x44, static_cast<char>(0xd8), static_cast<char>(0x86), static_cast<char>(0xa9),
        static_cast<char>(0xed), static_cast<char>(0xe8), 0x3d, static_cast<char>(0x8a), 0x50, 0x7b,
        static_cast<char>(0xa0), 0x3f, static_cast<char>(0x81), static_cast<char>(0x86), static_cast<char>(0xa3),
        static_cast<char>(0xd8), 0x57, static_cast<char>(0xf6), static_cast<char>(0xfa), static_cast<char>(0xad),
        static_cast<char>(0x83), static_cast<char>(0xdf), static_cast<char>(0xac), static_cast<char>(0xe0),
        static_cast<char>(0xbc), 0x00, static_cast<char>(0xeb), static_cast<char>(0xfd), 0x2c, static_cast<char>(0xc0),
        static_cast<char>(0x9c), static_cast<char>(0xe6), 0x46, static_cast<char>(0xc1), 0x34, 0x69, 0x56,
        static_cast<char>(0xaf), static_cast<char>(0x83), 0x6b, static_cast<char>(0xbe), 0x57, static_cast<char>(0x96),
        static_cast<char>(0xd0), static_cast<char>(0xb6), static_cast<char>(0xed), 0x4c, static_cast<char>(0xc7),
        static_cast<char>(0xd1), 0x2b, static_cast<char>(0xd7), 0x1f, 0x6b, static_cast<char>(0x9f), 0x17, 0x4d, 0x4c,
        static_cast<char>(0xb1), 0x64, static_cast<char>(0xd7), static_cast<char>(0x84), 0x0c, 0x40,
        static_cast<char>(0xa7), static_cast<char>(0xca), static_cast<char>(0x8d), static_cast<char>(0xb1), 0x65,
        static_cast<char>(0xcf), 0x12, static_cast<char>(0xf5), static_cast<char>(0xca), 0x01, 0x63,
        static_cast<char>(0xf8), 0x53, static_cast<char>(0x9e), static_cast<char>(0xef), static_cast<char>(0xe0),
        static_cast<char>(0x9b), static_cast<char>(0x9e), static_cast<char>(0x8c), static_cast<char>(0x84), 0x72,
        static_cast<char>(0xff), 0x64, static_cast<char>(0xa8), 0x6a, static_cast<char>(0xd9), 0x18, 0x48, 0x7f, 0x27, 0x33,
        static_cast<char>(0x8a), static_cast<char>(0x85), 0x1d, static_cast<char>(0xf2), static_cast<char>(0x9d),
        static_cast<char>(0x84), static_cast<char>(0xe7), static_cast<char>(0xfb), 0x0e, static_cast<char>(0x99),
        static_cast<char>(0xfe), 0x19, static_cast<char>(0xc5), static_cast<char>(0xed), 0x4c, static_cast<char>(0xde),
        static_cast<char>(0xba), static_cast<char>(0xd6), static_cast<char>(0xed), static_cast<char>(0xe8), 0x34,
        static_cast<char>(0xd7), 0x61, 0x6d, 0x76, 0x11, 0x75, static_cast<char>(0xe9), static_cast<char>(0xde), 0x23,
        static_cast<char>(0xa1), static_cast<char>(0xa3), static_cast<char>(0xa5), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x67, 0x52, 0x18, static_cast<char>(0xec), static_cast<char>(0xa8), 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x31, 0x2e, 0x36, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x33,
        0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31, 0x2e, 0x33, 0x35, 0x38, 0x31, 0x2e, 0x38, 0x2e,
        0x32, 0x2e, 0x31, 0x2e, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        static_cast<char>(0xf8)
    };

    std::string firmware_file(firmware, 64);
    std::string thumb_lod_header(thumbprint_lod_header, 64);
    std::string thumb_payload(thumbprint_payload, 256);
    std::string security_info(security_info_lod_header, 64);
    std::string security_signature(security_signature_lod_header, 64);
    std::string signature(signature_payload, 576);

    // add payload
    firmware_file.append("\x54\x65\x73\x74\x0a");
    // add security info
    firmware_file.append(security_info);
    firmware_file.append(thumb_lod_header);
    firmware_file.append(thumb_payload);
    firmware_file.append(security_signature);
    firmware_file.append(signature);
    IncomingStringValue string_value(firmware_file);

    Command response;
    NullableOutgoingValue response_value;
    RequestContext request_context;

    EXPECT_CALL(security_handler, VerifySecuritySignature(_, _, _)).WillOnce(Return(true));
    setup_handler.ProcessRequest(message, &string_value, &response, request_context, 42, true);
    EXPECT_EQ(Command_Status_StatusCode_SUCCESS, response.status().code());
    unlink(fifo);
}

} // namespace kinetic
} // namespace seagate
} // namespace com
